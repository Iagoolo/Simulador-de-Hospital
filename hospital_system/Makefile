# Diret√≥rios
SRC_DIR = src
INC_DIR = include
BIN_DIR = bin
TEST_DIR = test

# Compilador e flags
CXX = g++
CXXFLAGS = -Wall -Wextra -I$(INC_DIR) -std=c++17

# Arquivos fontes e objetos
SOURCES = $(wildcard $(SRC_DIR)/*.cpp)
OBJECTS = $(SOURCES:$(SRC_DIR)/%.cpp=$(BIN_DIR)/%.o)

# Nome do execut√°vel
EXEC = $(BIN_DIR)/hospital_system

# Nome do arquivo de testes
TEST_EXEC = $(BIN_DIR)/runner

# Regra padr√£o
all: $(EXEC)

# Regra para compilar o sistema
$(EXEC): $(OBJECTS)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $^ -o $@
	@echo "‚úÖ Compila√ß√£o do sistema conclu√≠da!"

# Regra para compilar os arquivos .cpp em .o
$(BIN_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Limpeza dos arquivos gerados
clean:
	rm -rf $(BIN_DIR)
	@echo "üóëÔ∏è Arquivos removidos!"

# Executa o sistema
run: $(EXEC)
	@echo "üöÄ Executando o sistema..."
	./$(EXEC)

# Executa os testes
test: $(TEST_EXEC)
	@echo "üöÄ Executando os testes..."
	./$(TEST_EXEC)

# Compila o c√≥digo de testes
$(TEST_EXEC): $(wildcard $(TEST_DIR)/*.cpp) $(OBJECTS)
	@mkdir -p $(BIN_DIR)
	$(CXX) $(CXXFLAGS) $^ -o $@
	@echo "‚úÖ Compila√ß√£o dos testes conclu√≠da!"

# For√ßa a recompila√ß√£o do test, independentemente de altera√ß√µes
force:
	@touch $(TEST_EXEC)

.PHONY: all clean run test force
